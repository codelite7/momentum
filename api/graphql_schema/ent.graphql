directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Agent implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  provider: String!
  model: String!
}
"""
A connection to a list of items.
"""
type AgentConnection {
  """
  A list of edges.
  """
  edges: [AgentEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AgentEdge {
  """
  The item at the end of the edge.
  """
  node: Agent
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Agent connections
"""
input AgentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Agents.
  """
  field: AgentOrderField!
}
"""
Properties by which Agent connections can be ordered.
"""
enum AgentOrderField {
  CREATED_AT
  UPDATED_AT
  PROVIDER
  MODEL
}
"""
AgentWhereInput is used for filtering Agent objects.
Input was generated by ent.
"""
input AgentWhereInput {
  not: AgentWhereInput
  and: [AgentWhereInput!]
  or: [AgentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  provider field predicates
  """
  provider: String
  providerNEQ: String
  providerIn: [String!]
  providerNotIn: [String!]
  providerGT: String
  providerGTE: String
  providerLT: String
  providerLTE: String
  providerContains: String
  providerHasPrefix: String
  providerHasSuffix: String
  providerEqualFold: String
  providerContainsFold: String
  """
  model field predicates
  """
  model: String
  modelNEQ: String
  modelIn: [String!]
  modelNotIn: [String!]
  modelGT: String
  modelGTE: String
  modelLT: String
  modelLTE: String
  modelContains: String
  modelHasPrefix: String
  modelHasSuffix: String
  modelEqualFold: String
  modelContainsFold: String
}
type Bookmark implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  user: User!
  thread: Thread
  message: Message
}
"""
A connection to a list of items.
"""
type BookmarkConnection {
  """
  A list of edges.
  """
  edges: [BookmarkEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type BookmarkEdge {
  """
  The item at the end of the edge.
  """
  node: Bookmark
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Bookmark connections
"""
input BookmarkOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Bookmarks.
  """
  field: BookmarkOrderField!
}
"""
Properties by which Bookmark connections can be ordered.
"""
enum BookmarkOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
BookmarkWhereInput is used for filtering Bookmark objects.
Input was generated by ent.
"""
input BookmarkWhereInput {
  not: BookmarkWhereInput
  and: [BookmarkWhereInput!]
  or: [BookmarkWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  thread edge predicates
  """
  hasThread: Boolean
  hasThreadWith: [ThreadWhereInput!]
  """
  message edge predicates
  """
  hasMessage: Boolean
  hasMessageWith: [MessageWhereInput!]
}
"""
CreateAgentInput is used for create Agent object.
Input was generated by ent.
"""
input CreateAgentInput {
  provider: String!
  model: String!
}
"""
CreateBookmarkInput is used for create Bookmark object.
Input was generated by ent.
"""
input CreateBookmarkInput {
  userID: ID!
  threadID: ID
  messageID: ID
}
"""
CreateMessageInput is used for create Message object.
Input was generated by ent.
"""
input CreateMessageInput {
  content: String!
  messageType: MessageMessageType!
  threadID: ID!
  bookmarkIDs: [ID!]
}
"""
CreateThreadInput is used for create Thread object.
Input was generated by ent.
"""
input CreateThreadInput {
  name: String!
  lastViewedAt: Time
  messageIDs: [ID!]
  bookmarkIDs: [ID!]
  parentID: ID
  childIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  email: String!
  bookmarkIDs: [ID!]
  threadIDs: [ID!]
  messageIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Message implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  content: String!
  messageType: MessageMessageType!
  sentBy: User!
  thread: Thread!
  bookmarks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Bookmarks returned from the connection.
    """
    orderBy: [BookmarkOrder!]

    """
    Filtering options for Bookmarks returned from the connection.
    """
    where: BookmarkWhereInput
  ): BookmarkConnection!
}
"""
A connection to a list of items.
"""
type MessageConnection {
  """
  A list of edges.
  """
  edges: [MessageEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type MessageEdge {
  """
  The item at the end of the edge.
  """
  node: Message
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
MessageMessageType is enum for the field message_type
"""
enum MessageMessageType @goModel(model: "github.com/codelite7/momentum/api/ent/message.MessageType") {
  human
  ai
  system
}
"""
Ordering options for Message connections
"""
input MessageOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Messages.
  """
  field: MessageOrderField!
}
"""
Properties by which Message connections can be ordered.
"""
enum MessageOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
MessageWhereInput is used for filtering Message objects.
Input was generated by ent.
"""
input MessageWhereInput {
  not: MessageWhereInput
  and: [MessageWhereInput!]
  or: [MessageWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """
  message_type field predicates
  """
  messageType: MessageMessageType
  messageTypeNEQ: MessageMessageType
  messageTypeIn: [MessageMessageType!]
  messageTypeNotIn: [MessageMessageType!]
  """
  sent_by edge predicates
  """
  hasSentBy: Boolean
  hasSentByWith: [UserWhereInput!]
  """
  thread edge predicates
  """
  hasThread: Boolean
  hasThreadWith: [ThreadWhereInput!]
  """
  bookmarks edge predicates
  """
  hasBookmarks: Boolean
  hasBookmarksWith: [BookmarkWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/codelite7/momentum/api/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  agents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Agents returned from the connection.
    """
    orderBy: [AgentOrder!]

    """
    Filtering options for Agents returned from the connection.
    """
    where: AgentWhereInput
  ): AgentConnection!
  bookmarks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Bookmarks returned from the connection.
    """
    orderBy: [BookmarkOrder!]

    """
    Filtering options for Bookmarks returned from the connection.
    """
    where: BookmarkWhereInput
  ): BookmarkConnection!
  messages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Messages returned from the connection.
    """
    orderBy: [MessageOrder!]

    """
    Filtering options for Messages returned from the connection.
    """
    where: MessageWhereInput
  ): MessageConnection!
  threads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Threads returned from the connection.
    """
    orderBy: [ThreadOrder!]

    """
    Filtering options for Threads returned from the connection.
    """
    where: ThreadWhereInput
  ): ThreadConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: [UserOrder!]

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
}
type Thread implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  lastViewedAt: Time!
  createdBy: User!
  messages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Messages returned from the connection.
    """
    orderBy: [MessageOrder!]

    """
    Filtering options for Messages returned from the connection.
    """
    where: MessageWhereInput
  ): MessageConnection!
  bookmarks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Bookmarks returned from the connection.
    """
    orderBy: [BookmarkOrder!]

    """
    Filtering options for Bookmarks returned from the connection.
    """
    where: BookmarkWhereInput
  ): BookmarkConnection!
  parent: Thread
  children(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Threads returned from the connection.
    """
    orderBy: [ThreadOrder!]

    """
    Filtering options for Threads returned from the connection.
    """
    where: ThreadWhereInput
  ): ThreadConnection!
}
"""
A connection to a list of items.
"""
type ThreadConnection {
  """
  A list of edges.
  """
  edges: [ThreadEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ThreadEdge {
  """
  The item at the end of the edge.
  """
  node: Thread
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Thread connections
"""
input ThreadOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Threads.
  """
  field: ThreadOrderField!
}
"""
Properties by which Thread connections can be ordered.
"""
enum ThreadOrderField {
  CREATED_AT
  UPDATED_AT
  NAME
  LAST_VIEWED_AT
}
"""
ThreadWhereInput is used for filtering Thread objects.
Input was generated by ent.
"""
input ThreadWhereInput {
  not: ThreadWhereInput
  and: [ThreadWhereInput!]
  or: [ThreadWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  last_viewed_at field predicates
  """
  lastViewedAt: Time
  lastViewedAtNEQ: Time
  lastViewedAtIn: [Time!]
  lastViewedAtNotIn: [Time!]
  lastViewedAtGT: Time
  lastViewedAtGTE: Time
  lastViewedAtLT: Time
  lastViewedAtLTE: Time
  """
  created_by edge predicates
  """
  hasCreatedBy: Boolean
  hasCreatedByWith: [UserWhereInput!]
  """
  messages edge predicates
  """
  hasMessages: Boolean
  hasMessagesWith: [MessageWhereInput!]
  """
  bookmarks edge predicates
  """
  hasBookmarks: Boolean
  hasBookmarksWith: [BookmarkWhereInput!]
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [ThreadWhereInput!]
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [ThreadWhereInput!]
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateAgentInput is used for update Agent object.
Input was generated by ent.
"""
input UpdateAgentInput {
  provider: String
  model: String
}
"""
UpdateBookmarkInput is used for update Bookmark object.
Input was generated by ent.
"""
input UpdateBookmarkInput {
  userID: ID
  threadID: ID
  clearThread: Boolean
  messageID: ID
  clearMessage: Boolean
}
"""
UpdateMessageInput is used for update Message object.
Input was generated by ent.
"""
input UpdateMessageInput {
  content: String
  messageType: MessageMessageType
  threadID: ID
  addBookmarkIDs: [ID!]
  removeBookmarkIDs: [ID!]
  clearBookmarks: Boolean
}
"""
UpdateThreadInput is used for update Thread object.
Input was generated by ent.
"""
input UpdateThreadInput {
  name: String
  lastViewedAt: Time
  addMessageIDs: [ID!]
  removeMessageIDs: [ID!]
  clearMessages: Boolean
  addBookmarkIDs: [ID!]
  removeBookmarkIDs: [ID!]
  clearBookmarks: Boolean
  parentID: ID
  clearParent: Boolean
  addChildIDs: [ID!]
  removeChildIDs: [ID!]
  clearChildren: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  email: String
  addBookmarkIDs: [ID!]
  removeBookmarkIDs: [ID!]
  clearBookmarks: Boolean
  addThreadIDs: [ID!]
  removeThreadIDs: [ID!]
  clearThreads: Boolean
  addMessageIDs: [ID!]
  removeMessageIDs: [ID!]
  clearMessages: Boolean
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  email: String!
  bookmarks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Bookmarks returned from the connection.
    """
    orderBy: [BookmarkOrder!]

    """
    Filtering options for Bookmarks returned from the connection.
    """
    where: BookmarkWhereInput
  ): BookmarkConnection!
  threads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Threads returned from the connection.
    """
    orderBy: [ThreadOrder!]

    """
    Filtering options for Threads returned from the connection.
    """
    where: ThreadWhereInput
  ): ThreadConnection!
  messages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Messages returned from the connection.
    """
    orderBy: [MessageOrder!]

    """
    Filtering options for Messages returned from the connection.
    """
    where: MessageWhereInput
  ): MessageConnection!
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  CREATED_AT
  UPDATED_AT
  EMAIL
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  bookmarks edge predicates
  """
  hasBookmarks: Boolean
  hasBookmarksWith: [BookmarkWhereInput!]
  """
  threads edge predicates
  """
  hasThreads: Boolean
  hasThreadsWith: [ThreadWhereInput!]
  """
  messages edge predicates
  """
  hasMessages: Boolean
  hasMessagesWith: [MessageWhereInput!]
}
