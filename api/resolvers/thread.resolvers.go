package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/codelite7/momentum/api/cmd/run/queue"
	"github.com/codelite7/momentum/api/common"
	"github.com/codelite7/momentum/api/ent"
	message2 "github.com/codelite7/momentum/api/ent/message"
	"github.com/codelite7/momentum/api/ent/schema/pulid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateThread is the resolver for the createThread field.
func (r *mutationResolver) CreateThread(ctx context.Context, input ent.CreateThreadInput, messageInput ent.CreateMessageInput) (*ent.Thread, error) {
	client := ent.FromContext(ctx)
	userInfo := common.GetUserIdFromContext(ctx)
	thread, err := client.Thread.Create().SetCreatedByID(userInfo.UserId).SetTenantID(userInfo.ActiveTenantId).SetInput(input).Save(ctx)
	if err != nil {
		return nil, gqlerror.Wrap(err)
	}
	message, err := client.Message.Create().SetSentByID(userInfo.UserId).SetTenantID(userInfo.ActiveTenantId).SetInput(messageInput).SetThread(thread).SetMessageType(message2.MessageTypeHuman).Save(ctx)
	if err != nil {
		return nil, gqlerror.Wrap(err)
	}
	// enqueue message
	err = queue.EnqueueMessageEvent(message.ID)
	if err != nil {
		return nil, gqlerror.Wrap(err)
	}
	// get so we get the messages back
	return client.Thread.Get(ctx, thread.ID)
}

// UpdateThread is the resolver for the updateThread field.
func (r *mutationResolver) UpdateThread(ctx context.Context, id pulid.ID, input ent.UpdateThreadInput) (*ent.Thread, error) {
	return ent.FromContext(ctx).Thread.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteThread is the resolver for the deleteThread field.
func (r *mutationResolver) DeleteThread(ctx context.Context, id pulid.ID) (pulid.ID, error) {
	err := ent.FromContext(ctx).Thread.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return "", err
	}
	return id, nil
}

// Thread is the resolver for the thread field.
func (r *queryResolver) Thread(ctx context.Context, id pulid.ID) (*ent.Thread, error) {
	thread, err := r.client.Thread.Get(ctx, id)
	return thread, err
}
