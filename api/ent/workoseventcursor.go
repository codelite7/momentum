// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/codelite7/momentum/api/ent/workoseventcursor"
)

// WorkosEventCursor is the model entity for the WorkosEventCursor schema.
type WorkosEventCursor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserCreatedCursor holds the value of the "user_created_cursor" field.
	UserCreatedCursor string `json:"user_created_cursor,omitempty"`
	selectValues      sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkosEventCursor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workoseventcursor.FieldID:
			values[i] = new(sql.NullInt64)
		case workoseventcursor.FieldUserCreatedCursor:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkosEventCursor fields.
func (wec *WorkosEventCursor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workoseventcursor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wec.ID = int(value.Int64)
		case workoseventcursor.FieldUserCreatedCursor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_created_cursor", values[i])
			} else if value.Valid {
				wec.UserCreatedCursor = value.String
			}
		default:
			wec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkosEventCursor.
// This includes values selected through modifiers, order, etc.
func (wec *WorkosEventCursor) Value(name string) (ent.Value, error) {
	return wec.selectValues.Get(name)
}

// Update returns a builder for updating this WorkosEventCursor.
// Note that you need to call WorkosEventCursor.Unwrap() before calling this method if this WorkosEventCursor
// was returned from a transaction, and the transaction was committed or rolled back.
func (wec *WorkosEventCursor) Update() *WorkosEventCursorUpdateOne {
	return NewWorkosEventCursorClient(wec.config).UpdateOne(wec)
}

// Unwrap unwraps the WorkosEventCursor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wec *WorkosEventCursor) Unwrap() *WorkosEventCursor {
	_tx, ok := wec.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkosEventCursor is not a transactional entity")
	}
	wec.config.driver = _tx.drv
	return wec
}

// String implements the fmt.Stringer.
func (wec *WorkosEventCursor) String() string {
	var builder strings.Builder
	builder.WriteString("WorkosEventCursor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wec.ID))
	builder.WriteString("user_created_cursor=")
	builder.WriteString(wec.UserCreatedCursor)
	builder.WriteByte(')')
	return builder.String()
}

// WorkosEventCursors is a parsable slice of WorkosEventCursor.
type WorkosEventCursors []*WorkosEventCursor
