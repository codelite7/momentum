// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/codelite7/momentum/api/ent/schema/pulid"
	"github.com/codelite7/momentum/api/ent/tenant"
	"github.com/codelite7/momentum/api/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Bookmarks holds the value of the bookmarks edge.
	Bookmarks []*Bookmark `json:"bookmarks,omitempty"`
	// Threads holds the value of the threads edge.
	Threads []*Thread `json:"threads,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedBookmarks map[string][]*Bookmark
	namedThreads   map[string][]*Thread
	namedMessages  map[string][]*Message
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// BookmarksOrErr returns the Bookmarks value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BookmarksOrErr() ([]*Bookmark, error) {
	if e.loadedTypes[1] {
		return e.Bookmarks, nil
	}
	return nil, &NotLoadedError{edge: "bookmarks"}
}

// ThreadsOrErr returns the Threads value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ThreadsOrErr() ([]*Thread, error) {
	if e.loadedTypes[2] {
		return e.Threads, nil
	}
	return nil, &NotLoadedError{edge: "threads"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[3] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldTenantID:
			values[i] = new(pulid.ID)
		case user.FieldEmail:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				u.TenantID = *value
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the User entity.
func (u *User) QueryTenant() *TenantQuery {
	return NewUserClient(u.config).QueryTenant(u)
}

// QueryBookmarks queries the "bookmarks" edge of the User entity.
func (u *User) QueryBookmarks() *BookmarkQuery {
	return NewUserClient(u.config).QueryBookmarks(u)
}

// QueryThreads queries the "threads" edge of the User entity.
func (u *User) QueryThreads() *ThreadQuery {
	return NewUserClient(u.config).QueryThreads(u)
}

// QueryMessages queries the "messages" edge of the User entity.
func (u *User) QueryMessages() *MessageQuery {
	return NewUserClient(u.config).QueryMessages(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", u.TenantID))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteByte(')')
	return builder.String()
}

// NamedBookmarks returns the Bookmarks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedBookmarks(name string) ([]*Bookmark, error) {
	if u.Edges.namedBookmarks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedBookmarks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedBookmarks(name string, edges ...*Bookmark) {
	if u.Edges.namedBookmarks == nil {
		u.Edges.namedBookmarks = make(map[string][]*Bookmark)
	}
	if len(edges) == 0 {
		u.Edges.namedBookmarks[name] = []*Bookmark{}
	} else {
		u.Edges.namedBookmarks[name] = append(u.Edges.namedBookmarks[name], edges...)
	}
}

// NamedThreads returns the Threads named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedThreads(name string) ([]*Thread, error) {
	if u.Edges.namedThreads == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedThreads[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedThreads(name string, edges ...*Thread) {
	if u.Edges.namedThreads == nil {
		u.Edges.namedThreads = make(map[string][]*Thread)
	}
	if len(edges) == 0 {
		u.Edges.namedThreads[name] = []*Thread{}
	} else {
		u.Edges.namedThreads[name] = append(u.Edges.namedThreads[name], edges...)
	}
}

// NamedMessages returns the Messages named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedMessages(name string) ([]*Message, error) {
	if u.Edges.namedMessages == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedMessages[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedMessages(name string, edges ...*Message) {
	if u.Edges.namedMessages == nil {
		u.Edges.namedMessages = make(map[string][]*Message)
	}
	if len(edges) == 0 {
		u.Edges.namedMessages[name] = []*Message{}
	} else {
		u.Edges.namedMessages[name] = append(u.Edges.namedMessages[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
