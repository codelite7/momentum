// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/codelite7/momentum/api/ent/agent"
	"github.com/codelite7/momentum/api/ent/predicate"
	"github.com/codelite7/momentum/api/ent/response"
	"github.com/google/uuid"
)

// AgentUpdate is the builder for updating Agent entities.
type AgentUpdate struct {
	config
	hooks    []Hook
	mutation *AgentMutation
}

// Where appends a list predicates to the AgentUpdate builder.
func (au *AgentUpdate) Where(ps ...predicate.Agent) *AgentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AgentUpdate) SetUpdatedAt(t time.Time) *AgentUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (au *AgentUpdate) SetNillableUpdatedAt(t *time.Time) *AgentUpdate {
	if t != nil {
		au.SetUpdatedAt(*t)
	}
	return au
}

// SetProvider sets the "provider" field.
func (au *AgentUpdate) SetProvider(s string) *AgentUpdate {
	au.mutation.SetProvider(s)
	return au
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (au *AgentUpdate) SetNillableProvider(s *string) *AgentUpdate {
	if s != nil {
		au.SetProvider(*s)
	}
	return au
}

// SetModel sets the "model" field.
func (au *AgentUpdate) SetModel(s string) *AgentUpdate {
	au.mutation.SetModel(s)
	return au
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (au *AgentUpdate) SetNillableModel(s *string) *AgentUpdate {
	if s != nil {
		au.SetModel(*s)
	}
	return au
}

// SetAPIKey sets the "api_key" field.
func (au *AgentUpdate) SetAPIKey(s string) *AgentUpdate {
	au.mutation.SetAPIKey(s)
	return au
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (au *AgentUpdate) SetNillableAPIKey(s *string) *AgentUpdate {
	if s != nil {
		au.SetAPIKey(*s)
	}
	return au
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (au *AgentUpdate) AddResponseIDs(ids ...uuid.UUID) *AgentUpdate {
	au.mutation.AddResponseIDs(ids...)
	return au
}

// AddResponses adds the "responses" edges to the Response entity.
func (au *AgentUpdate) AddResponses(r ...*Response) *AgentUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddResponseIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (au *AgentUpdate) Mutation() *AgentMutation {
	return au.mutation
}

// ClearResponses clears all "responses" edges to the Response entity.
func (au *AgentUpdate) ClearResponses() *AgentUpdate {
	au.mutation.ClearResponses()
	return au
}

// RemoveResponseIDs removes the "responses" edge to Response entities by IDs.
func (au *AgentUpdate) RemoveResponseIDs(ids ...uuid.UUID) *AgentUpdate {
	au.mutation.RemoveResponseIDs(ids...)
	return au
}

// RemoveResponses removes "responses" edges to Response entities.
func (au *AgentUpdate) RemoveResponses(r ...*Response) *AgentUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveResponseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AgentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AgentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AgentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AgentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AgentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(agent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.Provider(); ok {
		_spec.SetField(agent.FieldProvider, field.TypeString, value)
	}
	if value, ok := au.mutation.Model(); ok {
		_spec.SetField(agent.FieldModel, field.TypeString, value)
	}
	if value, ok := au.mutation.APIKey(); ok {
		_spec.SetField(agent.FieldAPIKey, field.TypeString, value)
	}
	if au.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.ResponsesTable,
			Columns: []string{agent.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !au.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.ResponsesTable,
			Columns: []string{agent.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.ResponsesTable,
			Columns: []string{agent.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AgentUpdateOne is the builder for updating a single Agent entity.
type AgentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AgentUpdateOne) SetUpdatedAt(t time.Time) *AgentUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableUpdatedAt(t *time.Time) *AgentUpdateOne {
	if t != nil {
		auo.SetUpdatedAt(*t)
	}
	return auo
}

// SetProvider sets the "provider" field.
func (auo *AgentUpdateOne) SetProvider(s string) *AgentUpdateOne {
	auo.mutation.SetProvider(s)
	return auo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableProvider(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetProvider(*s)
	}
	return auo
}

// SetModel sets the "model" field.
func (auo *AgentUpdateOne) SetModel(s string) *AgentUpdateOne {
	auo.mutation.SetModel(s)
	return auo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableModel(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetModel(*s)
	}
	return auo
}

// SetAPIKey sets the "api_key" field.
func (auo *AgentUpdateOne) SetAPIKey(s string) *AgentUpdateOne {
	auo.mutation.SetAPIKey(s)
	return auo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableAPIKey(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetAPIKey(*s)
	}
	return auo
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (auo *AgentUpdateOne) AddResponseIDs(ids ...uuid.UUID) *AgentUpdateOne {
	auo.mutation.AddResponseIDs(ids...)
	return auo
}

// AddResponses adds the "responses" edges to the Response entity.
func (auo *AgentUpdateOne) AddResponses(r ...*Response) *AgentUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddResponseIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (auo *AgentUpdateOne) Mutation() *AgentMutation {
	return auo.mutation
}

// ClearResponses clears all "responses" edges to the Response entity.
func (auo *AgentUpdateOne) ClearResponses() *AgentUpdateOne {
	auo.mutation.ClearResponses()
	return auo
}

// RemoveResponseIDs removes the "responses" edge to Response entities by IDs.
func (auo *AgentUpdateOne) RemoveResponseIDs(ids ...uuid.UUID) *AgentUpdateOne {
	auo.mutation.RemoveResponseIDs(ids...)
	return auo
}

// RemoveResponses removes "responses" edges to Response entities.
func (auo *AgentUpdateOne) RemoveResponses(r ...*Response) *AgentUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveResponseIDs(ids...)
}

// Where appends a list predicates to the AgentUpdate builder.
func (auo *AgentUpdateOne) Where(ps ...predicate.Agent) *AgentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AgentUpdateOne) Select(field string, fields ...string) *AgentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Agent entity.
func (auo *AgentUpdateOne) Save(ctx context.Context) (*Agent, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AgentUpdateOne) SaveX(ctx context.Context) *Agent {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AgentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AgentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AgentUpdateOne) sqlSave(ctx context.Context) (_node *Agent, err error) {
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Agent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agent.FieldID)
		for _, f := range fields {
			if !agent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(agent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Provider(); ok {
		_spec.SetField(agent.FieldProvider, field.TypeString, value)
	}
	if value, ok := auo.mutation.Model(); ok {
		_spec.SetField(agent.FieldModel, field.TypeString, value)
	}
	if value, ok := auo.mutation.APIKey(); ok {
		_spec.SetField(agent.FieldAPIKey, field.TypeString, value)
	}
	if auo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.ResponsesTable,
			Columns: []string{agent.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !auo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.ResponsesTable,
			Columns: []string{agent.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.ResponsesTable,
			Columns: []string{agent.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Agent{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
