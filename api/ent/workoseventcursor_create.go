// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/codelite7/momentum/api/ent/workoseventcursor"
)

// WorkosEventCursorCreate is the builder for creating a WorkosEventCursor entity.
type WorkosEventCursorCreate struct {
	config
	mutation *WorkosEventCursorMutation
	hooks    []Hook
}

// SetUserCreatedCursor sets the "user_created_cursor" field.
func (wecc *WorkosEventCursorCreate) SetUserCreatedCursor(s string) *WorkosEventCursorCreate {
	wecc.mutation.SetUserCreatedCursor(s)
	return wecc
}

// SetNillableUserCreatedCursor sets the "user_created_cursor" field if the given value is not nil.
func (wecc *WorkosEventCursorCreate) SetNillableUserCreatedCursor(s *string) *WorkosEventCursorCreate {
	if s != nil {
		wecc.SetUserCreatedCursor(*s)
	}
	return wecc
}

// Mutation returns the WorkosEventCursorMutation object of the builder.
func (wecc *WorkosEventCursorCreate) Mutation() *WorkosEventCursorMutation {
	return wecc.mutation
}

// Save creates the WorkosEventCursor in the database.
func (wecc *WorkosEventCursorCreate) Save(ctx context.Context) (*WorkosEventCursor, error) {
	return withHooks(ctx, wecc.sqlSave, wecc.mutation, wecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wecc *WorkosEventCursorCreate) SaveX(ctx context.Context) *WorkosEventCursor {
	v, err := wecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wecc *WorkosEventCursorCreate) Exec(ctx context.Context) error {
	_, err := wecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wecc *WorkosEventCursorCreate) ExecX(ctx context.Context) {
	if err := wecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wecc *WorkosEventCursorCreate) check() error {
	return nil
}

func (wecc *WorkosEventCursorCreate) sqlSave(ctx context.Context) (*WorkosEventCursor, error) {
	if err := wecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wecc.mutation.id = &_node.ID
	wecc.mutation.done = true
	return _node, nil
}

func (wecc *WorkosEventCursorCreate) createSpec() (*WorkosEventCursor, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkosEventCursor{config: wecc.config}
		_spec = sqlgraph.NewCreateSpec(workoseventcursor.Table, sqlgraph.NewFieldSpec(workoseventcursor.FieldID, field.TypeInt))
	)
	if value, ok := wecc.mutation.UserCreatedCursor(); ok {
		_spec.SetField(workoseventcursor.FieldUserCreatedCursor, field.TypeString, value)
		_node.UserCreatedCursor = value
	}
	return _node, _spec
}

// WorkosEventCursorCreateBulk is the builder for creating many WorkosEventCursor entities in bulk.
type WorkosEventCursorCreateBulk struct {
	config
	err      error
	builders []*WorkosEventCursorCreate
}

// Save creates the WorkosEventCursor entities in the database.
func (weccb *WorkosEventCursorCreateBulk) Save(ctx context.Context) ([]*WorkosEventCursor, error) {
	if weccb.err != nil {
		return nil, weccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(weccb.builders))
	nodes := make([]*WorkosEventCursor, len(weccb.builders))
	mutators := make([]Mutator, len(weccb.builders))
	for i := range weccb.builders {
		func(i int, root context.Context) {
			builder := weccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkosEventCursorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, weccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, weccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, weccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (weccb *WorkosEventCursorCreateBulk) SaveX(ctx context.Context) []*WorkosEventCursor {
	v, err := weccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (weccb *WorkosEventCursorCreateBulk) Exec(ctx context.Context) error {
	_, err := weccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weccb *WorkosEventCursorCreateBulk) ExecX(ctx context.Context) {
	if err := weccb.Exec(ctx); err != nil {
		panic(err)
	}
}
