// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/codelite7/momentum/api/ent/predicate"
	"github.com/codelite7/momentum/api/ent/workoseventcursor"
)

// WorkosEventCursorUpdate is the builder for updating WorkosEventCursor entities.
type WorkosEventCursorUpdate struct {
	config
	hooks    []Hook
	mutation *WorkosEventCursorMutation
}

// Where appends a list predicates to the WorkosEventCursorUpdate builder.
func (wecu *WorkosEventCursorUpdate) Where(ps ...predicate.WorkosEventCursor) *WorkosEventCursorUpdate {
	wecu.mutation.Where(ps...)
	return wecu
}

// SetUserCreatedCursor sets the "user_created_cursor" field.
func (wecu *WorkosEventCursorUpdate) SetUserCreatedCursor(s string) *WorkosEventCursorUpdate {
	wecu.mutation.SetUserCreatedCursor(s)
	return wecu
}

// SetNillableUserCreatedCursor sets the "user_created_cursor" field if the given value is not nil.
func (wecu *WorkosEventCursorUpdate) SetNillableUserCreatedCursor(s *string) *WorkosEventCursorUpdate {
	if s != nil {
		wecu.SetUserCreatedCursor(*s)
	}
	return wecu
}

// ClearUserCreatedCursor clears the value of the "user_created_cursor" field.
func (wecu *WorkosEventCursorUpdate) ClearUserCreatedCursor() *WorkosEventCursorUpdate {
	wecu.mutation.ClearUserCreatedCursor()
	return wecu
}

// Mutation returns the WorkosEventCursorMutation object of the builder.
func (wecu *WorkosEventCursorUpdate) Mutation() *WorkosEventCursorMutation {
	return wecu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wecu *WorkosEventCursorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wecu.sqlSave, wecu.mutation, wecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wecu *WorkosEventCursorUpdate) SaveX(ctx context.Context) int {
	affected, err := wecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wecu *WorkosEventCursorUpdate) Exec(ctx context.Context) error {
	_, err := wecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wecu *WorkosEventCursorUpdate) ExecX(ctx context.Context) {
	if err := wecu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wecu *WorkosEventCursorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(workoseventcursor.Table, workoseventcursor.Columns, sqlgraph.NewFieldSpec(workoseventcursor.FieldID, field.TypeInt))
	if ps := wecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wecu.mutation.UserCreatedCursor(); ok {
		_spec.SetField(workoseventcursor.FieldUserCreatedCursor, field.TypeString, value)
	}
	if wecu.mutation.UserCreatedCursorCleared() {
		_spec.ClearField(workoseventcursor.FieldUserCreatedCursor, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workoseventcursor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wecu.mutation.done = true
	return n, nil
}

// WorkosEventCursorUpdateOne is the builder for updating a single WorkosEventCursor entity.
type WorkosEventCursorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkosEventCursorMutation
}

// SetUserCreatedCursor sets the "user_created_cursor" field.
func (wecuo *WorkosEventCursorUpdateOne) SetUserCreatedCursor(s string) *WorkosEventCursorUpdateOne {
	wecuo.mutation.SetUserCreatedCursor(s)
	return wecuo
}

// SetNillableUserCreatedCursor sets the "user_created_cursor" field if the given value is not nil.
func (wecuo *WorkosEventCursorUpdateOne) SetNillableUserCreatedCursor(s *string) *WorkosEventCursorUpdateOne {
	if s != nil {
		wecuo.SetUserCreatedCursor(*s)
	}
	return wecuo
}

// ClearUserCreatedCursor clears the value of the "user_created_cursor" field.
func (wecuo *WorkosEventCursorUpdateOne) ClearUserCreatedCursor() *WorkosEventCursorUpdateOne {
	wecuo.mutation.ClearUserCreatedCursor()
	return wecuo
}

// Mutation returns the WorkosEventCursorMutation object of the builder.
func (wecuo *WorkosEventCursorUpdateOne) Mutation() *WorkosEventCursorMutation {
	return wecuo.mutation
}

// Where appends a list predicates to the WorkosEventCursorUpdate builder.
func (wecuo *WorkosEventCursorUpdateOne) Where(ps ...predicate.WorkosEventCursor) *WorkosEventCursorUpdateOne {
	wecuo.mutation.Where(ps...)
	return wecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wecuo *WorkosEventCursorUpdateOne) Select(field string, fields ...string) *WorkosEventCursorUpdateOne {
	wecuo.fields = append([]string{field}, fields...)
	return wecuo
}

// Save executes the query and returns the updated WorkosEventCursor entity.
func (wecuo *WorkosEventCursorUpdateOne) Save(ctx context.Context) (*WorkosEventCursor, error) {
	return withHooks(ctx, wecuo.sqlSave, wecuo.mutation, wecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wecuo *WorkosEventCursorUpdateOne) SaveX(ctx context.Context) *WorkosEventCursor {
	node, err := wecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wecuo *WorkosEventCursorUpdateOne) Exec(ctx context.Context) error {
	_, err := wecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wecuo *WorkosEventCursorUpdateOne) ExecX(ctx context.Context) {
	if err := wecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wecuo *WorkosEventCursorUpdateOne) sqlSave(ctx context.Context) (_node *WorkosEventCursor, err error) {
	_spec := sqlgraph.NewUpdateSpec(workoseventcursor.Table, workoseventcursor.Columns, sqlgraph.NewFieldSpec(workoseventcursor.FieldID, field.TypeInt))
	id, ok := wecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkosEventCursor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workoseventcursor.FieldID)
		for _, f := range fields {
			if !workoseventcursor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workoseventcursor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wecuo.mutation.UserCreatedCursor(); ok {
		_spec.SetField(workoseventcursor.FieldUserCreatedCursor, field.TypeString, value)
	}
	if wecuo.mutation.UserCreatedCursorCleared() {
		_spec.ClearField(workoseventcursor.FieldUserCreatedCursor, field.TypeString)
	}
	_node = &WorkosEventCursor{config: wecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workoseventcursor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wecuo.mutation.done = true
	return _node, nil
}
