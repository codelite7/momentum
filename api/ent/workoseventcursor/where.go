// Code generated by ent, DO NOT EDIT.

package workoseventcursor

import (
	"entgo.io/ent/dialect/sql"
	"github.com/codelite7/momentum/api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldLTE(FieldID, id))
}

// UserCreatedCursor applies equality check predicate on the "user_created_cursor" field. It's identical to UserCreatedCursorEQ.
func UserCreatedCursor(v string) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldEQ(FieldUserCreatedCursor, v))
}

// UserCreatedCursorEQ applies the EQ predicate on the "user_created_cursor" field.
func UserCreatedCursorEQ(v string) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldEQ(FieldUserCreatedCursor, v))
}

// UserCreatedCursorNEQ applies the NEQ predicate on the "user_created_cursor" field.
func UserCreatedCursorNEQ(v string) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldNEQ(FieldUserCreatedCursor, v))
}

// UserCreatedCursorIn applies the In predicate on the "user_created_cursor" field.
func UserCreatedCursorIn(vs ...string) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldIn(FieldUserCreatedCursor, vs...))
}

// UserCreatedCursorNotIn applies the NotIn predicate on the "user_created_cursor" field.
func UserCreatedCursorNotIn(vs ...string) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldNotIn(FieldUserCreatedCursor, vs...))
}

// UserCreatedCursorGT applies the GT predicate on the "user_created_cursor" field.
func UserCreatedCursorGT(v string) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldGT(FieldUserCreatedCursor, v))
}

// UserCreatedCursorGTE applies the GTE predicate on the "user_created_cursor" field.
func UserCreatedCursorGTE(v string) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldGTE(FieldUserCreatedCursor, v))
}

// UserCreatedCursorLT applies the LT predicate on the "user_created_cursor" field.
func UserCreatedCursorLT(v string) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldLT(FieldUserCreatedCursor, v))
}

// UserCreatedCursorLTE applies the LTE predicate on the "user_created_cursor" field.
func UserCreatedCursorLTE(v string) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldLTE(FieldUserCreatedCursor, v))
}

// UserCreatedCursorContains applies the Contains predicate on the "user_created_cursor" field.
func UserCreatedCursorContains(v string) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldContains(FieldUserCreatedCursor, v))
}

// UserCreatedCursorHasPrefix applies the HasPrefix predicate on the "user_created_cursor" field.
func UserCreatedCursorHasPrefix(v string) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldHasPrefix(FieldUserCreatedCursor, v))
}

// UserCreatedCursorHasSuffix applies the HasSuffix predicate on the "user_created_cursor" field.
func UserCreatedCursorHasSuffix(v string) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldHasSuffix(FieldUserCreatedCursor, v))
}

// UserCreatedCursorIsNil applies the IsNil predicate on the "user_created_cursor" field.
func UserCreatedCursorIsNil() predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldIsNull(FieldUserCreatedCursor))
}

// UserCreatedCursorNotNil applies the NotNil predicate on the "user_created_cursor" field.
func UserCreatedCursorNotNil() predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldNotNull(FieldUserCreatedCursor))
}

// UserCreatedCursorEqualFold applies the EqualFold predicate on the "user_created_cursor" field.
func UserCreatedCursorEqualFold(v string) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldEqualFold(FieldUserCreatedCursor, v))
}

// UserCreatedCursorContainsFold applies the ContainsFold predicate on the "user_created_cursor" field.
func UserCreatedCursorContainsFold(v string) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.FieldContainsFold(FieldUserCreatedCursor, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkosEventCursor) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkosEventCursor) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkosEventCursor) predicate.WorkosEventCursor {
	return predicate.WorkosEventCursor(sql.NotPredicates(p))
}
