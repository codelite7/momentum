// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/codelite7/momentum/api/ent/agent"
	"github.com/codelite7/momentum/api/ent/bookmark"
	"github.com/codelite7/momentum/api/ent/message"
	"github.com/codelite7/momentum/api/ent/thread"
	"github.com/codelite7/momentum/api/ent/user"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[uuid.UUID]
	PageInfo       = entgql.PageInfo[uuid.UUID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AgentEdge is the edge representation of Agent.
type AgentEdge struct {
	Node   *Agent `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// AgentConnection is the connection containing edges to Agent.
type AgentConnection struct {
	Edges      []*AgentEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *AgentConnection) build(nodes []*Agent, pager *agentPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Agent
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Agent {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Agent {
			return nodes[i]
		}
	}
	c.Edges = make([]*AgentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AgentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AgentPaginateOption enables pagination customization.
type AgentPaginateOption func(*agentPager) error

// WithAgentOrder configures pagination ordering.
func WithAgentOrder(order []*AgentOrder) AgentPaginateOption {
	return func(pager *agentPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithAgentFilter configures pagination filter.
func WithAgentFilter(filter func(*AgentQuery) (*AgentQuery, error)) AgentPaginateOption {
	return func(pager *agentPager) error {
		if filter == nil {
			return errors.New("AgentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type agentPager struct {
	reverse bool
	order   []*AgentOrder
	filter  func(*AgentQuery) (*AgentQuery, error)
}

func newAgentPager(opts []AgentPaginateOption, reverse bool) (*agentPager, error) {
	pager := &agentPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *agentPager) applyFilter(query *AgentQuery) (*AgentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *agentPager) toCursor(a *Agent) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(a).Value)
	}
	return Cursor{ID: a.ID, Value: cs_}
}

func (p *agentPager) applyCursors(query *AgentQuery, after, before *Cursor) (*AgentQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultAgentOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *agentPager) applyOrder(query *AgentQuery) *AgentQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultAgentOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultAgentOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *agentPager) orderExpr(query *AgentQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultAgentOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Agent.
func (a *AgentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AgentPaginateOption,
) (*AgentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAgentPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AgentConnection{Edges: []*AgentEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := a.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AgentOrderFieldCreatedAt orders Agent by created_at.
	AgentOrderFieldCreatedAt = &AgentOrderField{
		Value: func(a *Agent) (ent.Value, error) {
			return a.CreatedAt, nil
		},
		column: agent.FieldCreatedAt,
		toTerm: agent.ByCreatedAt,
		toCursor: func(a *Agent) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.CreatedAt,
			}
		},
	}
	// AgentOrderFieldUpdatedAt orders Agent by updated_at.
	AgentOrderFieldUpdatedAt = &AgentOrderField{
		Value: func(a *Agent) (ent.Value, error) {
			return a.UpdatedAt, nil
		},
		column: agent.FieldUpdatedAt,
		toTerm: agent.ByUpdatedAt,
		toCursor: func(a *Agent) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.UpdatedAt,
			}
		},
	}
	// AgentOrderFieldName orders Agent by name.
	AgentOrderFieldName = &AgentOrderField{
		Value: func(a *Agent) (ent.Value, error) {
			return a.Name, nil
		},
		column: agent.FieldName,
		toTerm: agent.ByName,
		toCursor: func(a *Agent) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.Name,
			}
		},
	}
	// AgentOrderFieldModel orders Agent by model.
	AgentOrderFieldModel = &AgentOrderField{
		Value: func(a *Agent) (ent.Value, error) {
			return a.Model, nil
		},
		column: agent.FieldModel,
		toTerm: agent.ByModel,
		toCursor: func(a *Agent) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.Model,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AgentOrderField) String() string {
	var str string
	switch f.column {
	case AgentOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case AgentOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case AgentOrderFieldName.column:
		str = "NAME"
	case AgentOrderFieldModel.column:
		str = "MODEL"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AgentOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AgentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AgentOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *AgentOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *AgentOrderFieldUpdatedAt
	case "NAME":
		*f = *AgentOrderFieldName
	case "MODEL":
		*f = *AgentOrderFieldModel
	default:
		return fmt.Errorf("%s is not a valid AgentOrderField", str)
	}
	return nil
}

// AgentOrderField defines the ordering field of Agent.
type AgentOrderField struct {
	// Value extracts the ordering value from the given Agent.
	Value    func(*Agent) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) agent.OrderOption
	toCursor func(*Agent) Cursor
}

// AgentOrder defines the ordering of Agent.
type AgentOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *AgentOrderField `json:"field"`
}

// DefaultAgentOrder is the default ordering of Agent.
var DefaultAgentOrder = &AgentOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AgentOrderField{
		Value: func(a *Agent) (ent.Value, error) {
			return a.ID, nil
		},
		column: agent.FieldID,
		toTerm: agent.ByID,
		toCursor: func(a *Agent) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Agent into AgentEdge.
func (a *Agent) ToEdge(order *AgentOrder) *AgentEdge {
	if order == nil {
		order = DefaultAgentOrder
	}
	return &AgentEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// BookmarkEdge is the edge representation of Bookmark.
type BookmarkEdge struct {
	Node   *Bookmark `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// BookmarkConnection is the connection containing edges to Bookmark.
type BookmarkConnection struct {
	Edges      []*BookmarkEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *BookmarkConnection) build(nodes []*Bookmark, pager *bookmarkPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Bookmark
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Bookmark {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Bookmark {
			return nodes[i]
		}
	}
	c.Edges = make([]*BookmarkEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BookmarkEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BookmarkPaginateOption enables pagination customization.
type BookmarkPaginateOption func(*bookmarkPager) error

// WithBookmarkOrder configures pagination ordering.
func WithBookmarkOrder(order []*BookmarkOrder) BookmarkPaginateOption {
	return func(pager *bookmarkPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithBookmarkFilter configures pagination filter.
func WithBookmarkFilter(filter func(*BookmarkQuery) (*BookmarkQuery, error)) BookmarkPaginateOption {
	return func(pager *bookmarkPager) error {
		if filter == nil {
			return errors.New("BookmarkQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type bookmarkPager struct {
	reverse bool
	order   []*BookmarkOrder
	filter  func(*BookmarkQuery) (*BookmarkQuery, error)
}

func newBookmarkPager(opts []BookmarkPaginateOption, reverse bool) (*bookmarkPager, error) {
	pager := &bookmarkPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *bookmarkPager) applyFilter(query *BookmarkQuery) (*BookmarkQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *bookmarkPager) toCursor(b *Bookmark) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(b).Value)
	}
	return Cursor{ID: b.ID, Value: cs_}
}

func (p *bookmarkPager) applyCursors(query *BookmarkQuery, after, before *Cursor) (*BookmarkQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultBookmarkOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *bookmarkPager) applyOrder(query *BookmarkQuery) *BookmarkQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultBookmarkOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultBookmarkOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *bookmarkPager) orderExpr(query *BookmarkQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultBookmarkOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Bookmark.
func (b *BookmarkQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BookmarkPaginateOption,
) (*BookmarkConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBookmarkPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if b, err = pager.applyFilter(b); err != nil {
		return nil, err
	}
	conn := &BookmarkConnection{Edges: []*BookmarkEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := b.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if b, err = pager.applyCursors(b, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		b.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := b.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	b = pager.applyOrder(b)
	nodes, err := b.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// BookmarkOrderFieldCreatedAt orders Bookmark by created_at.
	BookmarkOrderFieldCreatedAt = &BookmarkOrderField{
		Value: func(b *Bookmark) (ent.Value, error) {
			return b.CreatedAt, nil
		},
		column: bookmark.FieldCreatedAt,
		toTerm: bookmark.ByCreatedAt,
		toCursor: func(b *Bookmark) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.CreatedAt,
			}
		},
	}
	// BookmarkOrderFieldUpdatedAt orders Bookmark by updated_at.
	BookmarkOrderFieldUpdatedAt = &BookmarkOrderField{
		Value: func(b *Bookmark) (ent.Value, error) {
			return b.UpdatedAt, nil
		},
		column: bookmark.FieldUpdatedAt,
		toTerm: bookmark.ByUpdatedAt,
		toCursor: func(b *Bookmark) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f BookmarkOrderField) String() string {
	var str string
	switch f.column {
	case BookmarkOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case BookmarkOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f BookmarkOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *BookmarkOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("BookmarkOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *BookmarkOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *BookmarkOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid BookmarkOrderField", str)
	}
	return nil
}

// BookmarkOrderField defines the ordering field of Bookmark.
type BookmarkOrderField struct {
	// Value extracts the ordering value from the given Bookmark.
	Value    func(*Bookmark) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) bookmark.OrderOption
	toCursor func(*Bookmark) Cursor
}

// BookmarkOrder defines the ordering of Bookmark.
type BookmarkOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *BookmarkOrderField `json:"field"`
}

// DefaultBookmarkOrder is the default ordering of Bookmark.
var DefaultBookmarkOrder = &BookmarkOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &BookmarkOrderField{
		Value: func(b *Bookmark) (ent.Value, error) {
			return b.ID, nil
		},
		column: bookmark.FieldID,
		toTerm: bookmark.ByID,
		toCursor: func(b *Bookmark) Cursor {
			return Cursor{ID: b.ID}
		},
	},
}

// ToEdge converts Bookmark into BookmarkEdge.
func (b *Bookmark) ToEdge(order *BookmarkOrder) *BookmarkEdge {
	if order == nil {
		order = DefaultBookmarkOrder
	}
	return &BookmarkEdge{
		Node:   b,
		Cursor: order.Field.toCursor(b),
	}
}

// MessageEdge is the edge representation of Message.
type MessageEdge struct {
	Node   *Message `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// MessageConnection is the connection containing edges to Message.
type MessageConnection struct {
	Edges      []*MessageEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *MessageConnection) build(nodes []*Message, pager *messagePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Message
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Message {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Message {
			return nodes[i]
		}
	}
	c.Edges = make([]*MessageEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MessageEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MessagePaginateOption enables pagination customization.
type MessagePaginateOption func(*messagePager) error

// WithMessageOrder configures pagination ordering.
func WithMessageOrder(order []*MessageOrder) MessagePaginateOption {
	return func(pager *messagePager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithMessageFilter configures pagination filter.
func WithMessageFilter(filter func(*MessageQuery) (*MessageQuery, error)) MessagePaginateOption {
	return func(pager *messagePager) error {
		if filter == nil {
			return errors.New("MessageQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type messagePager struct {
	reverse bool
	order   []*MessageOrder
	filter  func(*MessageQuery) (*MessageQuery, error)
}

func newMessagePager(opts []MessagePaginateOption, reverse bool) (*messagePager, error) {
	pager := &messagePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *messagePager) applyFilter(query *MessageQuery) (*MessageQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *messagePager) toCursor(m *Message) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(m).Value)
	}
	return Cursor{ID: m.ID, Value: cs_}
}

func (p *messagePager) applyCursors(query *MessageQuery, after, before *Cursor) (*MessageQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultMessageOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *messagePager) applyOrder(query *MessageQuery) *MessageQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultMessageOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultMessageOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *messagePager) orderExpr(query *MessageQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultMessageOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Message.
func (m *MessageQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MessagePaginateOption,
) (*MessageConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMessagePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if m, err = pager.applyFilter(m); err != nil {
		return nil, err
	}
	conn := &MessageConnection{Edges: []*MessageEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if m, err = pager.applyCursors(m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	m = pager.applyOrder(m)
	nodes, err := m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MessageOrderFieldCreatedAt orders Message by created_at.
	MessageOrderFieldCreatedAt = &MessageOrderField{
		Value: func(m *Message) (ent.Value, error) {
			return m.CreatedAt, nil
		},
		column: message.FieldCreatedAt,
		toTerm: message.ByCreatedAt,
		toCursor: func(m *Message) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.CreatedAt,
			}
		},
	}
	// MessageOrderFieldUpdatedAt orders Message by updated_at.
	MessageOrderFieldUpdatedAt = &MessageOrderField{
		Value: func(m *Message) (ent.Value, error) {
			return m.UpdatedAt, nil
		},
		column: message.FieldUpdatedAt,
		toTerm: message.ByUpdatedAt,
		toCursor: func(m *Message) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MessageOrderField) String() string {
	var str string
	switch f.column {
	case MessageOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case MessageOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MessageOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MessageOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MessageOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *MessageOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *MessageOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid MessageOrderField", str)
	}
	return nil
}

// MessageOrderField defines the ordering field of Message.
type MessageOrderField struct {
	// Value extracts the ordering value from the given Message.
	Value    func(*Message) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) message.OrderOption
	toCursor func(*Message) Cursor
}

// MessageOrder defines the ordering of Message.
type MessageOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *MessageOrderField `json:"field"`
}

// DefaultMessageOrder is the default ordering of Message.
var DefaultMessageOrder = &MessageOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MessageOrderField{
		Value: func(m *Message) (ent.Value, error) {
			return m.ID, nil
		},
		column: message.FieldID,
		toTerm: message.ByID,
		toCursor: func(m *Message) Cursor {
			return Cursor{ID: m.ID}
		},
	},
}

// ToEdge converts Message into MessageEdge.
func (m *Message) ToEdge(order *MessageOrder) *MessageEdge {
	if order == nil {
		order = DefaultMessageOrder
	}
	return &MessageEdge{
		Node:   m,
		Cursor: order.Field.toCursor(m),
	}
}

// ThreadEdge is the edge representation of Thread.
type ThreadEdge struct {
	Node   *Thread `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// ThreadConnection is the connection containing edges to Thread.
type ThreadConnection struct {
	Edges      []*ThreadEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *ThreadConnection) build(nodes []*Thread, pager *threadPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Thread
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Thread {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Thread {
			return nodes[i]
		}
	}
	c.Edges = make([]*ThreadEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ThreadEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ThreadPaginateOption enables pagination customization.
type ThreadPaginateOption func(*threadPager) error

// WithThreadOrder configures pagination ordering.
func WithThreadOrder(order []*ThreadOrder) ThreadPaginateOption {
	return func(pager *threadPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithThreadFilter configures pagination filter.
func WithThreadFilter(filter func(*ThreadQuery) (*ThreadQuery, error)) ThreadPaginateOption {
	return func(pager *threadPager) error {
		if filter == nil {
			return errors.New("ThreadQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type threadPager struct {
	reverse bool
	order   []*ThreadOrder
	filter  func(*ThreadQuery) (*ThreadQuery, error)
}

func newThreadPager(opts []ThreadPaginateOption, reverse bool) (*threadPager, error) {
	pager := &threadPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *threadPager) applyFilter(query *ThreadQuery) (*ThreadQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *threadPager) toCursor(t *Thread) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(t).Value)
	}
	return Cursor{ID: t.ID, Value: cs_}
}

func (p *threadPager) applyCursors(query *ThreadQuery, after, before *Cursor) (*ThreadQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultThreadOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *threadPager) applyOrder(query *ThreadQuery) *ThreadQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultThreadOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultThreadOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *threadPager) orderExpr(query *ThreadQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultThreadOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Thread.
func (t *ThreadQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ThreadPaginateOption,
) (*ThreadConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newThreadPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &ThreadConnection{Edges: []*ThreadEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := t.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if t, err = pager.applyCursors(t, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	t = pager.applyOrder(t)
	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ThreadOrderFieldCreatedAt orders Thread by created_at.
	ThreadOrderFieldCreatedAt = &ThreadOrderField{
		Value: func(t *Thread) (ent.Value, error) {
			return t.CreatedAt, nil
		},
		column: thread.FieldCreatedAt,
		toTerm: thread.ByCreatedAt,
		toCursor: func(t *Thread) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.CreatedAt,
			}
		},
	}
	// ThreadOrderFieldUpdatedAt orders Thread by updated_at.
	ThreadOrderFieldUpdatedAt = &ThreadOrderField{
		Value: func(t *Thread) (ent.Value, error) {
			return t.UpdatedAt, nil
		},
		column: thread.FieldUpdatedAt,
		toTerm: thread.ByUpdatedAt,
		toCursor: func(t *Thread) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.UpdatedAt,
			}
		},
	}
	// ThreadOrderFieldName orders Thread by name.
	ThreadOrderFieldName = &ThreadOrderField{
		Value: func(t *Thread) (ent.Value, error) {
			return t.Name, nil
		},
		column: thread.FieldName,
		toTerm: thread.ByName,
		toCursor: func(t *Thread) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ThreadOrderField) String() string {
	var str string
	switch f.column {
	case ThreadOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ThreadOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ThreadOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ThreadOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ThreadOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ThreadOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *ThreadOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ThreadOrderFieldUpdatedAt
	case "NAME":
		*f = *ThreadOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid ThreadOrderField", str)
	}
	return nil
}

// ThreadOrderField defines the ordering field of Thread.
type ThreadOrderField struct {
	// Value extracts the ordering value from the given Thread.
	Value    func(*Thread) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) thread.OrderOption
	toCursor func(*Thread) Cursor
}

// ThreadOrder defines the ordering of Thread.
type ThreadOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *ThreadOrderField `json:"field"`
}

// DefaultThreadOrder is the default ordering of Thread.
var DefaultThreadOrder = &ThreadOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ThreadOrderField{
		Value: func(t *Thread) (ent.Value, error) {
			return t.ID, nil
		},
		column: thread.FieldID,
		toTerm: thread.ByID,
		toCursor: func(t *Thread) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Thread into ThreadEdge.
func (t *Thread) ToEdge(order *ThreadOrder) *ThreadEdge {
	if order == nil {
		order = DefaultThreadOrder
	}
	return &ThreadEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order []*UserOrder) UserPaginateOption {
	return func(pager *userPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   []*UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(u).Value)
	}
	return Cursor{ID: u.ID, Value: cs_}
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultUserOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultUserOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := u.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if u, err = pager.applyCursors(u, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	u = pager.applyOrder(u)
	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserOrderFieldCreatedAt orders User by created_at.
	UserOrderFieldCreatedAt = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.CreatedAt, nil
		},
		column: user.FieldCreatedAt,
		toTerm: user.ByCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreatedAt,
			}
		},
	}
	// UserOrderFieldUpdatedAt orders User by updated_at.
	UserOrderFieldUpdatedAt = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.UpdatedAt, nil
		},
		column: user.FieldUpdatedAt,
		toTerm: user.ByUpdatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.UpdatedAt,
			}
		},
	}
	// UserOrderFieldEmail orders User by email.
	UserOrderFieldEmail = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.Email, nil
		},
		column: user.FieldEmail,
		toTerm: user.ByEmail,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.Email,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.column {
	case UserOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case UserOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case UserOrderFieldEmail.column:
		str = "EMAIL"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *UserOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *UserOrderFieldUpdatedAt
	case "EMAIL":
		*f = *UserOrderFieldEmail
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
