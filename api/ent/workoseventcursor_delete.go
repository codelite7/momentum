// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/codelite7/momentum/api/ent/predicate"
	"github.com/codelite7/momentum/api/ent/workoseventcursor"
)

// WorkosEventCursorDelete is the builder for deleting a WorkosEventCursor entity.
type WorkosEventCursorDelete struct {
	config
	hooks    []Hook
	mutation *WorkosEventCursorMutation
}

// Where appends a list predicates to the WorkosEventCursorDelete builder.
func (wecd *WorkosEventCursorDelete) Where(ps ...predicate.WorkosEventCursor) *WorkosEventCursorDelete {
	wecd.mutation.Where(ps...)
	return wecd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wecd *WorkosEventCursorDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wecd.sqlExec, wecd.mutation, wecd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wecd *WorkosEventCursorDelete) ExecX(ctx context.Context) int {
	n, err := wecd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wecd *WorkosEventCursorDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(workoseventcursor.Table, sqlgraph.NewFieldSpec(workoseventcursor.FieldID, field.TypeInt))
	if ps := wecd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wecd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wecd.mutation.done = true
	return affected, err
}

// WorkosEventCursorDeleteOne is the builder for deleting a single WorkosEventCursor entity.
type WorkosEventCursorDeleteOne struct {
	wecd *WorkosEventCursorDelete
}

// Where appends a list predicates to the WorkosEventCursorDelete builder.
func (wecdo *WorkosEventCursorDeleteOne) Where(ps ...predicate.WorkosEventCursor) *WorkosEventCursorDeleteOne {
	wecdo.wecd.mutation.Where(ps...)
	return wecdo
}

// Exec executes the deletion query.
func (wecdo *WorkosEventCursorDeleteOne) Exec(ctx context.Context) error {
	n, err := wecdo.wecd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{workoseventcursor.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wecdo *WorkosEventCursorDeleteOne) ExecX(ctx context.Context) {
	if err := wecdo.Exec(ctx); err != nil {
		panic(err)
	}
}
