// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/codelite7/momentum/api/ent/agent"
	"github.com/codelite7/momentum/api/ent/message"
	"github.com/codelite7/momentum/api/ent/response"
	"github.com/google/uuid"
)

// Response is the model entity for the Response schema.
type Response struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResponseQuery when eager-loading is set.
	Edges            ResponseEdges `json:"edges"`
	agent_responses  *uuid.UUID
	message_response *uuid.UUID
	selectValues     sql.SelectValues
}

// ResponseEdges holds the relations/edges for other nodes in the graph.
type ResponseEdges struct {
	// SentBy holds the value of the sent_by edge.
	SentBy *Agent `json:"sent_by,omitempty"`
	// Message holds the value of the message edge.
	Message *Message `json:"message,omitempty"`
	// Bookmarks holds the value of the bookmarks edge.
	Bookmarks []*Bookmark `json:"bookmarks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedBookmarks map[string][]*Bookmark
}

// SentByOrErr returns the SentBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResponseEdges) SentByOrErr() (*Agent, error) {
	if e.SentBy != nil {
		return e.SentBy, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: agent.Label}
	}
	return nil, &NotLoadedError{edge: "sent_by"}
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResponseEdges) MessageOrErr() (*Message, error) {
	if e.Message != nil {
		return e.Message, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: message.Label}
	}
	return nil, &NotLoadedError{edge: "message"}
}

// BookmarksOrErr returns the Bookmarks value or an error if the edge
// was not loaded in eager-loading.
func (e ResponseEdges) BookmarksOrErr() ([]*Bookmark, error) {
	if e.loadedTypes[2] {
		return e.Bookmarks, nil
	}
	return nil, &NotLoadedError{edge: "bookmarks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Response) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case response.FieldContent:
			values[i] = new(sql.NullString)
		case response.FieldCreatedAt, response.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case response.FieldID:
			values[i] = new(uuid.UUID)
		case response.ForeignKeys[0]: // agent_responses
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case response.ForeignKeys[1]: // message_response
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Response fields.
func (r *Response) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case response.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case response.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case response.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case response.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				r.Content = value.String
			}
		case response.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field agent_responses", values[i])
			} else if value.Valid {
				r.agent_responses = new(uuid.UUID)
				*r.agent_responses = *value.S.(*uuid.UUID)
			}
		case response.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field message_response", values[i])
			} else if value.Valid {
				r.message_response = new(uuid.UUID)
				*r.message_response = *value.S.(*uuid.UUID)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Response.
// This includes values selected through modifiers, order, etc.
func (r *Response) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QuerySentBy queries the "sent_by" edge of the Response entity.
func (r *Response) QuerySentBy() *AgentQuery {
	return NewResponseClient(r.config).QuerySentBy(r)
}

// QueryMessage queries the "message" edge of the Response entity.
func (r *Response) QueryMessage() *MessageQuery {
	return NewResponseClient(r.config).QueryMessage(r)
}

// QueryBookmarks queries the "bookmarks" edge of the Response entity.
func (r *Response) QueryBookmarks() *BookmarkQuery {
	return NewResponseClient(r.config).QueryBookmarks(r)
}

// Update returns a builder for updating this Response.
// Note that you need to call Response.Unwrap() before calling this method if this Response
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Response) Update() *ResponseUpdateOne {
	return NewResponseClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Response entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Response) Unwrap() *Response {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Response is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Response) String() string {
	var builder strings.Builder
	builder.WriteString("Response(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(r.Content)
	builder.WriteByte(')')
	return builder.String()
}

// NamedBookmarks returns the Bookmarks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Response) NamedBookmarks(name string) ([]*Bookmark, error) {
	if r.Edges.namedBookmarks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedBookmarks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Response) appendNamedBookmarks(name string, edges ...*Bookmark) {
	if r.Edges.namedBookmarks == nil {
		r.Edges.namedBookmarks = make(map[string][]*Bookmark)
	}
	if len(edges) == 0 {
		r.Edges.namedBookmarks[name] = []*Bookmark{}
	} else {
		r.Edges.namedBookmarks[name] = append(r.Edges.namedBookmarks[name], edges...)
	}
}

// Responses is a parsable slice of Response.
type Responses []*Response
