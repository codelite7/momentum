// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/codelite7/momentum/api/ent/agent"
	"github.com/codelite7/momentum/api/ent/bookmark"
	"github.com/codelite7/momentum/api/ent/message"
	"github.com/codelite7/momentum/api/ent/predicate"
	"github.com/codelite7/momentum/api/ent/response"
	"github.com/google/uuid"
)

// ResponseUpdate is the builder for updating Response entities.
type ResponseUpdate struct {
	config
	hooks    []Hook
	mutation *ResponseMutation
}

// Where appends a list predicates to the ResponseUpdate builder.
func (ru *ResponseUpdate) Where(ps ...predicate.Response) *ResponseUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ResponseUpdate) SetUpdatedAt(t time.Time) *ResponseUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ru *ResponseUpdate) SetNillableUpdatedAt(t *time.Time) *ResponseUpdate {
	if t != nil {
		ru.SetUpdatedAt(*t)
	}
	return ru
}

// SetContent sets the "content" field.
func (ru *ResponseUpdate) SetContent(s string) *ResponseUpdate {
	ru.mutation.SetContent(s)
	return ru
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ru *ResponseUpdate) SetNillableContent(s *string) *ResponseUpdate {
	if s != nil {
		ru.SetContent(*s)
	}
	return ru
}

// ClearContent clears the value of the "content" field.
func (ru *ResponseUpdate) ClearContent() *ResponseUpdate {
	ru.mutation.ClearContent()
	return ru
}

// SetSentByID sets the "sent_by" edge to the Agent entity by ID.
func (ru *ResponseUpdate) SetSentByID(id uuid.UUID) *ResponseUpdate {
	ru.mutation.SetSentByID(id)
	return ru
}

// SetSentBy sets the "sent_by" edge to the Agent entity.
func (ru *ResponseUpdate) SetSentBy(a *Agent) *ResponseUpdate {
	return ru.SetSentByID(a.ID)
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (ru *ResponseUpdate) SetMessageID(id uuid.UUID) *ResponseUpdate {
	ru.mutation.SetMessageID(id)
	return ru
}

// SetMessage sets the "message" edge to the Message entity.
func (ru *ResponseUpdate) SetMessage(m *Message) *ResponseUpdate {
	return ru.SetMessageID(m.ID)
}

// AddBookmarkIDs adds the "bookmarks" edge to the Bookmark entity by IDs.
func (ru *ResponseUpdate) AddBookmarkIDs(ids ...uuid.UUID) *ResponseUpdate {
	ru.mutation.AddBookmarkIDs(ids...)
	return ru
}

// AddBookmarks adds the "bookmarks" edges to the Bookmark entity.
func (ru *ResponseUpdate) AddBookmarks(b ...*Bookmark) *ResponseUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ru.AddBookmarkIDs(ids...)
}

// Mutation returns the ResponseMutation object of the builder.
func (ru *ResponseUpdate) Mutation() *ResponseMutation {
	return ru.mutation
}

// ClearSentBy clears the "sent_by" edge to the Agent entity.
func (ru *ResponseUpdate) ClearSentBy() *ResponseUpdate {
	ru.mutation.ClearSentBy()
	return ru
}

// ClearMessage clears the "message" edge to the Message entity.
func (ru *ResponseUpdate) ClearMessage() *ResponseUpdate {
	ru.mutation.ClearMessage()
	return ru
}

// ClearBookmarks clears all "bookmarks" edges to the Bookmark entity.
func (ru *ResponseUpdate) ClearBookmarks() *ResponseUpdate {
	ru.mutation.ClearBookmarks()
	return ru
}

// RemoveBookmarkIDs removes the "bookmarks" edge to Bookmark entities by IDs.
func (ru *ResponseUpdate) RemoveBookmarkIDs(ids ...uuid.UUID) *ResponseUpdate {
	ru.mutation.RemoveBookmarkIDs(ids...)
	return ru
}

// RemoveBookmarks removes "bookmarks" edges to Bookmark entities.
func (ru *ResponseUpdate) RemoveBookmarks(b ...*Bookmark) *ResponseUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ru.RemoveBookmarkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResponseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResponseUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResponseUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResponseUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ResponseUpdate) check() error {
	if _, ok := ru.mutation.SentByID(); ru.mutation.SentByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Response.sent_by"`)
	}
	if _, ok := ru.mutation.MessageID(); ru.mutation.MessageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Response.message"`)
	}
	return nil
}

func (ru *ResponseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(response.Table, response.Columns, sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(response.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Content(); ok {
		_spec.SetField(response.FieldContent, field.TypeString, value)
	}
	if ru.mutation.ContentCleared() {
		_spec.ClearField(response.FieldContent, field.TypeString)
	}
	if ru.mutation.SentByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.SentByTable,
			Columns: []string{response.SentByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SentByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.SentByTable,
			Columns: []string{response.SentByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   response.MessageTable,
			Columns: []string{response.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   response.MessageTable,
			Columns: []string{response.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.BookmarksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   response.BookmarksTable,
			Columns: []string{response.BookmarksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookmark.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedBookmarksIDs(); len(nodes) > 0 && !ru.mutation.BookmarksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   response.BookmarksTable,
			Columns: []string{response.BookmarksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookmark.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.BookmarksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   response.BookmarksTable,
			Columns: []string{response.BookmarksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookmark.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{response.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ResponseUpdateOne is the builder for updating a single Response entity.
type ResponseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResponseMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ResponseUpdateOne) SetUpdatedAt(t time.Time) *ResponseUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruo *ResponseUpdateOne) SetNillableUpdatedAt(t *time.Time) *ResponseUpdateOne {
	if t != nil {
		ruo.SetUpdatedAt(*t)
	}
	return ruo
}

// SetContent sets the "content" field.
func (ruo *ResponseUpdateOne) SetContent(s string) *ResponseUpdateOne {
	ruo.mutation.SetContent(s)
	return ruo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ruo *ResponseUpdateOne) SetNillableContent(s *string) *ResponseUpdateOne {
	if s != nil {
		ruo.SetContent(*s)
	}
	return ruo
}

// ClearContent clears the value of the "content" field.
func (ruo *ResponseUpdateOne) ClearContent() *ResponseUpdateOne {
	ruo.mutation.ClearContent()
	return ruo
}

// SetSentByID sets the "sent_by" edge to the Agent entity by ID.
func (ruo *ResponseUpdateOne) SetSentByID(id uuid.UUID) *ResponseUpdateOne {
	ruo.mutation.SetSentByID(id)
	return ruo
}

// SetSentBy sets the "sent_by" edge to the Agent entity.
func (ruo *ResponseUpdateOne) SetSentBy(a *Agent) *ResponseUpdateOne {
	return ruo.SetSentByID(a.ID)
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (ruo *ResponseUpdateOne) SetMessageID(id uuid.UUID) *ResponseUpdateOne {
	ruo.mutation.SetMessageID(id)
	return ruo
}

// SetMessage sets the "message" edge to the Message entity.
func (ruo *ResponseUpdateOne) SetMessage(m *Message) *ResponseUpdateOne {
	return ruo.SetMessageID(m.ID)
}

// AddBookmarkIDs adds the "bookmarks" edge to the Bookmark entity by IDs.
func (ruo *ResponseUpdateOne) AddBookmarkIDs(ids ...uuid.UUID) *ResponseUpdateOne {
	ruo.mutation.AddBookmarkIDs(ids...)
	return ruo
}

// AddBookmarks adds the "bookmarks" edges to the Bookmark entity.
func (ruo *ResponseUpdateOne) AddBookmarks(b ...*Bookmark) *ResponseUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ruo.AddBookmarkIDs(ids...)
}

// Mutation returns the ResponseMutation object of the builder.
func (ruo *ResponseUpdateOne) Mutation() *ResponseMutation {
	return ruo.mutation
}

// ClearSentBy clears the "sent_by" edge to the Agent entity.
func (ruo *ResponseUpdateOne) ClearSentBy() *ResponseUpdateOne {
	ruo.mutation.ClearSentBy()
	return ruo
}

// ClearMessage clears the "message" edge to the Message entity.
func (ruo *ResponseUpdateOne) ClearMessage() *ResponseUpdateOne {
	ruo.mutation.ClearMessage()
	return ruo
}

// ClearBookmarks clears all "bookmarks" edges to the Bookmark entity.
func (ruo *ResponseUpdateOne) ClearBookmarks() *ResponseUpdateOne {
	ruo.mutation.ClearBookmarks()
	return ruo
}

// RemoveBookmarkIDs removes the "bookmarks" edge to Bookmark entities by IDs.
func (ruo *ResponseUpdateOne) RemoveBookmarkIDs(ids ...uuid.UUID) *ResponseUpdateOne {
	ruo.mutation.RemoveBookmarkIDs(ids...)
	return ruo
}

// RemoveBookmarks removes "bookmarks" edges to Bookmark entities.
func (ruo *ResponseUpdateOne) RemoveBookmarks(b ...*Bookmark) *ResponseUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ruo.RemoveBookmarkIDs(ids...)
}

// Where appends a list predicates to the ResponseUpdate builder.
func (ruo *ResponseUpdateOne) Where(ps ...predicate.Response) *ResponseUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResponseUpdateOne) Select(field string, fields ...string) *ResponseUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Response entity.
func (ruo *ResponseUpdateOne) Save(ctx context.Context) (*Response, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResponseUpdateOne) SaveX(ctx context.Context) *Response {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResponseUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResponseUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ResponseUpdateOne) check() error {
	if _, ok := ruo.mutation.SentByID(); ruo.mutation.SentByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Response.sent_by"`)
	}
	if _, ok := ruo.mutation.MessageID(); ruo.mutation.MessageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Response.message"`)
	}
	return nil
}

func (ruo *ResponseUpdateOne) sqlSave(ctx context.Context) (_node *Response, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(response.Table, response.Columns, sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Response.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, response.FieldID)
		for _, f := range fields {
			if !response.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != response.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(response.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Content(); ok {
		_spec.SetField(response.FieldContent, field.TypeString, value)
	}
	if ruo.mutation.ContentCleared() {
		_spec.ClearField(response.FieldContent, field.TypeString)
	}
	if ruo.mutation.SentByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.SentByTable,
			Columns: []string{response.SentByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SentByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.SentByTable,
			Columns: []string{response.SentByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   response.MessageTable,
			Columns: []string{response.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   response.MessageTable,
			Columns: []string{response.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.BookmarksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   response.BookmarksTable,
			Columns: []string{response.BookmarksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookmark.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedBookmarksIDs(); len(nodes) > 0 && !ruo.mutation.BookmarksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   response.BookmarksTable,
			Columns: []string{response.BookmarksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookmark.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.BookmarksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   response.BookmarksTable,
			Columns: []string{response.BookmarksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookmark.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Response{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{response.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
