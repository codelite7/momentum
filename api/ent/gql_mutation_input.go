// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateAgentInput represents a mutation input for creating agents.
type CreateAgentInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Name      string
	Model     string
}

// Mutate applies the CreateAgentInput on the AgentMutation builder.
func (i *CreateAgentInput) Mutate(m *AgentMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetModel(i.Model)
}

// SetInput applies the change-set in the CreateAgentInput on the AgentCreate builder.
func (c *AgentCreate) SetInput(i CreateAgentInput) *AgentCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAgentInput represents a mutation input for updating agents.
type UpdateAgentInput struct {
	UpdatedAt *time.Time
	Name      *string
	Model     *string
}

// Mutate applies the UpdateAgentInput on the AgentMutation builder.
func (i *UpdateAgentInput) Mutate(m *AgentMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Model; v != nil {
		m.SetModel(*v)
	}
}

// SetInput applies the change-set in the UpdateAgentInput on the AgentUpdate builder.
func (c *AgentUpdate) SetInput(i UpdateAgentInput) *AgentUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAgentInput on the AgentUpdateOne builder.
func (c *AgentUpdateOne) SetInput(i UpdateAgentInput) *AgentUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateBookmarkInput represents a mutation input for creating bookmarks.
type CreateBookmarkInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
}

// Mutate applies the CreateBookmarkInput on the BookmarkMutation builder.
func (i *CreateBookmarkInput) Mutate(m *BookmarkMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the CreateBookmarkInput on the BookmarkCreate builder.
func (c *BookmarkCreate) SetInput(i CreateBookmarkInput) *BookmarkCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateBookmarkInput represents a mutation input for updating bookmarks.
type UpdateBookmarkInput struct {
	UpdatedAt *time.Time
}

// Mutate applies the UpdateBookmarkInput on the BookmarkMutation builder.
func (i *UpdateBookmarkInput) Mutate(m *BookmarkMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the UpdateBookmarkInput on the BookmarkUpdate builder.
func (c *BookmarkUpdate) SetInput(i UpdateBookmarkInput) *BookmarkUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateBookmarkInput on the BookmarkUpdateOne builder.
func (c *BookmarkUpdateOne) SetInput(i UpdateBookmarkInput) *BookmarkUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateMessageInput represents a mutation input for creating messages.
type CreateMessageInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Content   string
}

// Mutate applies the CreateMessageInput on the MessageMutation builder.
func (i *CreateMessageInput) Mutate(m *MessageMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetContent(i.Content)
}

// SetInput applies the change-set in the CreateMessageInput on the MessageCreate builder.
func (c *MessageCreate) SetInput(i CreateMessageInput) *MessageCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMessageInput represents a mutation input for updating messages.
type UpdateMessageInput struct {
	UpdatedAt *time.Time
	Content   *string
}

// Mutate applies the UpdateMessageInput on the MessageMutation builder.
func (i *UpdateMessageInput) Mutate(m *MessageMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
}

// SetInput applies the change-set in the UpdateMessageInput on the MessageUpdate builder.
func (c *MessageUpdate) SetInput(i UpdateMessageInput) *MessageUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMessageInput on the MessageUpdateOne builder.
func (c *MessageUpdateOne) SetInput(i UpdateMessageInput) *MessageUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateThreadInput represents a mutation input for creating threads.
type CreateThreadInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Name      string
}

// Mutate applies the CreateThreadInput on the ThreadMutation builder.
func (i *CreateThreadInput) Mutate(m *ThreadMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
}

// SetInput applies the change-set in the CreateThreadInput on the ThreadCreate builder.
func (c *ThreadCreate) SetInput(i CreateThreadInput) *ThreadCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateThreadInput represents a mutation input for updating threads.
type UpdateThreadInput struct {
	UpdatedAt *time.Time
	Name      *string
}

// Mutate applies the UpdateThreadInput on the ThreadMutation builder.
func (i *UpdateThreadInput) Mutate(m *ThreadMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateThreadInput on the ThreadUpdate builder.
func (c *ThreadUpdate) SetInput(i UpdateThreadInput) *ThreadUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateThreadInput on the ThreadUpdateOne builder.
func (c *ThreadUpdateOne) SetInput(i UpdateThreadInput) *ThreadUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Email     string
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetEmail(i.Email)
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdatedAt *time.Time
	Email     *string
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
