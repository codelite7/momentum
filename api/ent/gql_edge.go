// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Agent) Users(ctx context.Context) (*User, error) {
	result, err := a.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryUsers().Only(ctx)
	}
	return result, err
}

func (b *Bookmark) User(ctx context.Context) (*User, error) {
	result, err := b.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryUser().Only(ctx)
	}
	return result, err
}

func (b *Bookmark) Thread(ctx context.Context) (*Thread, error) {
	result, err := b.Edges.ThreadOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryThread().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Bookmark) Message(ctx context.Context) (*Message, error) {
	result, err := b.Edges.MessageOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryMessage().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Message) SentBy(ctx context.Context) (*User, error) {
	result, err := m.Edges.SentByOrErr()
	if IsNotLoaded(err) {
		result, err = m.QuerySentBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Message) Thread(ctx context.Context) (*Thread, error) {
	result, err := m.Edges.ThreadOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryThread().Only(ctx)
	}
	return result, err
}

func (m *Message) Bookmarks(ctx context.Context) (result []*Bookmark, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedBookmarks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.BookmarksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryBookmarks().All(ctx)
	}
	return result, err
}

func (t *Thread) CreatedBy(ctx context.Context) (*User, error) {
	result, err := t.Edges.CreatedByOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryCreatedBy().Only(ctx)
	}
	return result, err
}

func (t *Thread) Messages(ctx context.Context) (result []*Message, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedMessages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.MessagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryMessages().All(ctx)
	}
	return result, err
}

func (t *Thread) Bookmarks(ctx context.Context) (result []*Bookmark, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedBookmarks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.BookmarksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryBookmarks().All(ctx)
	}
	return result, err
}

func (t *Thread) Child(ctx context.Context) (*Thread, error) {
	result, err := t.Edges.ChildOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryChild().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Thread) Parent(ctx context.Context) (*Thread, error) {
	result, err := t.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Agent(ctx context.Context) (*Agent, error) {
	result, err := u.Edges.AgentOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryAgent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Bookmarks(ctx context.Context) (result []*Bookmark, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedBookmarks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.BookmarksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryBookmarks().All(ctx)
	}
	return result, err
}

func (u *User) Threads(ctx context.Context) (result []*Thread, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedThreads(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ThreadsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryThreads().All(ctx)
	}
	return result, err
}

func (u *User) Messages(ctx context.Context) (result []*Message, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedMessages(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.MessagesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryMessages().All(ctx)
	}
	return result, err
}
