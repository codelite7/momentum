// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Agent) Messages(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*MessageOrder, where *MessageWhereInput,
) (*MessageConnection, error) {
	opts := []MessagePaginateOption{
		WithMessageOrder(orderBy),
		WithMessageFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := a.Edges.totalCount[0][alias]
	if nodes, err := a.NamedMessages(alias); err == nil || hasTotalCount {
		pager, err := newMessagePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &MessageConnection{Edges: []*MessageEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return a.QueryMessages().Paginate(ctx, after, first, before, last, opts...)
}

func (b *Bookmark) User(ctx context.Context) (*User, error) {
	result, err := b.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryUser().Only(ctx)
	}
	return result, err
}

func (b *Bookmark) Thread(ctx context.Context) (*Thread, error) {
	result, err := b.Edges.ThreadOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryThread().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Bookmark) Message(ctx context.Context) (*Message, error) {
	result, err := b.Edges.MessageOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryMessage().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Message) SentByAgent(ctx context.Context) (*Agent, error) {
	result, err := m.Edges.SentByAgentOrErr()
	if IsNotLoaded(err) {
		result, err = m.QuerySentByAgent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Message) SentByUser(ctx context.Context) (*User, error) {
	result, err := m.Edges.SentByUserOrErr()
	if IsNotLoaded(err) {
		result, err = m.QuerySentByUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Message) Thread(ctx context.Context) (*Thread, error) {
	result, err := m.Edges.ThreadOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryThread().Only(ctx)
	}
	return result, err
}

func (m *Message) Bookmarks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*BookmarkOrder, where *BookmarkWhereInput,
) (*BookmarkConnection, error) {
	opts := []BookmarkPaginateOption{
		WithBookmarkOrder(orderBy),
		WithBookmarkFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := m.Edges.totalCount[3][alias]
	if nodes, err := m.NamedBookmarks(alias); err == nil || hasTotalCount {
		pager, err := newBookmarkPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &BookmarkConnection{Edges: []*BookmarkEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return m.QueryBookmarks().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Thread) CreatedBy(ctx context.Context) (*User, error) {
	result, err := t.Edges.CreatedByOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryCreatedBy().Only(ctx)
	}
	return result, err
}

func (t *Thread) Messages(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*MessageOrder, where *MessageWhereInput,
) (*MessageConnection, error) {
	opts := []MessagePaginateOption{
		WithMessageOrder(orderBy),
		WithMessageFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[1][alias]
	if nodes, err := t.NamedMessages(alias); err == nil || hasTotalCount {
		pager, err := newMessagePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &MessageConnection{Edges: []*MessageEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryMessages().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Thread) Bookmarks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*BookmarkOrder, where *BookmarkWhereInput,
) (*BookmarkConnection, error) {
	opts := []BookmarkPaginateOption{
		WithBookmarkOrder(orderBy),
		WithBookmarkFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[2][alias]
	if nodes, err := t.NamedBookmarks(alias); err == nil || hasTotalCount {
		pager, err := newBookmarkPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &BookmarkConnection{Edges: []*BookmarkEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryBookmarks().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Thread) Child(ctx context.Context) (*Thread, error) {
	result, err := t.Edges.ChildOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryChild().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Thread) Parent(ctx context.Context) (*Thread, error) {
	result, err := t.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Bookmarks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*BookmarkOrder, where *BookmarkWhereInput,
) (*BookmarkConnection, error) {
	opts := []BookmarkPaginateOption{
		WithBookmarkOrder(orderBy),
		WithBookmarkFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[0][alias]
	if nodes, err := u.NamedBookmarks(alias); err == nil || hasTotalCount {
		pager, err := newBookmarkPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &BookmarkConnection{Edges: []*BookmarkEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryBookmarks().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Threads(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*ThreadOrder, where *ThreadWhereInput,
) (*ThreadConnection, error) {
	opts := []ThreadPaginateOption{
		WithThreadOrder(orderBy),
		WithThreadFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[1][alias]
	if nodes, err := u.NamedThreads(alias); err == nil || hasTotalCount {
		pager, err := newThreadPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ThreadConnection{Edges: []*ThreadEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryThreads().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Messages(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*MessageOrder, where *MessageWhereInput,
) (*MessageConnection, error) {
	opts := []MessagePaginateOption{
		WithMessageOrder(orderBy),
		WithMessageFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[2][alias]
	if nodes, err := u.NamedMessages(alias); err == nil || hasTotalCount {
		pager, err := newMessagePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &MessageConnection{Edges: []*MessageEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryMessages().Paginate(ctx, after, first, before, last, opts...)
}
